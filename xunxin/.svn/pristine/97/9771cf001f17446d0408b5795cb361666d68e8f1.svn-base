package com.xunxin.controller.app.user;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.google.gson.JsonObject;
import com.xunxin.config.SendEmail;
import com.xunxin.config.SymmetricEncoder;
import com.xunxin.constants.DynamicConstants;
import com.xunxin.constants.ExpConstants;
import com.xunxin.controller.system.BaseController;
import com.xunxin.service.app.AppUserService;
import com.xunxin.service.app.PersonalAuthenticationService;
import com.xunxin.service.app.user.UserAuthenticationService;
import com.xunxin.service.app.user.UserDynamicRecordService;
import com.xunxin.service.app.user.UserExpChangeRecordService;
import com.xunxin.util.DESUtils;
import com.xunxin.util.MD5_UTIL;
import com.xunxin.util.PeriodsUtil;
import com.xunxin.util.app.OrderGeneratedUtils;
import com.xunxin.vo.account.UserExpChangeRecord;
import com.xunxin.vo.sys.PageData;
import com.xunxin.vo.user.UserAuthentication;
import com.xunxin.vo.user.UserDynamicRecordVO;
import com.xunxin.vo.user.UserEntity;
import com.xunxin.web.api.bean.Response;
import com.xunxin.web.api.bean.Router;

/**
 * 
 * Copyright © 2017 noseparte(Libra) © Like the wind, like rain
 * @Author Noseparte
 * @Compile 2017年10月30日 -- 下午5:07:17
 * @Version 1.0
 * @Description	个人资料认证
 */
@Controller
@RequestMapping(value=Router.PATH+Router.Personal.PATH)
public class PersonalAuthenticationController extends BaseController{

    private static final Logger log = Logger.getLogger(PersonalAuthenticationController.class);
    
	private static final String KEY_STR = "41ED0A742D7DAA5D45F84708C2792158";
	
	@Autowired
	private AppUserService appUserService;
	@Autowired
	private PersonalAuthenticationService personalAuthenticationService;
	@Autowired
	private UserAuthenticationService userAuthenticationService;
	@Autowired
	private UserDynamicRecordService userDynamicRecordService;
	@Autowired
	private UserExpChangeRecordService userExpChangeRecordService;
	
	
	/**
	 * 是否实名认证
	 * 
	 * @param id
	 * @param certNo
	 * @return
	 */
	@RequestMapping(value=Router.Personal.IS_AUTHENTICATION,method=RequestMethod.POST)
	@ResponseBody
	public Response is_authentication(@RequestParam("userId") int userId) {
		log.info("InfoMsg:--- is_authentication start");
		Response response = this.getReponse();
		try {
//			int isAuthentication = appUserService.is_authentication(userId);
			UserAuthentication isAuthentication = userAuthenticationService.model(userId,"cert");
			log.info("InfoMsg:--- is_authentication end");
			return response.success(isAuthentication);
		} catch (Exception e) {
			log.error("errorMsg:--- is_authentication occur error " + e.getMessage());
			return response.failure(e.getMessage());
		}
	}
	
	
	/**
	 * 手机认证
	 * 
	 * @param phone
	 * @param verifyCode
	 * @return
	 */
	@RequestMapping(value=Router.Personal.PHONE_AUTHENTICATION,method=RequestMethod.POST)
	@ResponseBody
	public Response phone_authentication(@RequestParam("userId") int userId,@RequestParam("phone") String phone
			,@RequestParam("authType") String authType) {
		log.info("InfoMsg:--- phone_authentication start");
		Response response = this.getReponse();
		try {
		    UserEntity user = appUserService.findById(userId);
			PageData pd = new PageData<>();
			pd.put("userId", userId);
			pd.put("authType", "cert");
			if(!userAuthenticationService.isAuthentication(pd)) {
				return response.failure("请先进行实名认证");
			}
			String message = personalAuthenticationService.phone_authentication(userId,phone,authType);
			String authRemark = user.getNickName() + "于:" + PeriodsUtil.getWholeTime(new Date()) + "进行了手机认证";
			//保存认证信息
			UserAuthentication auth = new UserAuthentication(message, authType, 2,"", authRemark, new Date(), userId);
			userAuthenticationService.save(auth);
			if(message.equals("匹配")) {
			    //手机认证动态记录
				UserDynamicRecordVO vo = new UserDynamicRecordVO(0, "", "进行的手机认证", DynamicConstants.AUTHENT_CHANGE, "", userId, 0);
				userDynamicRecordService.save(vo);
				//赠送积分
				int userExp = user.getUserExp();
				appUserService.user_exp_change(userId, userExp + 50);
				//生成积分记录
				UserExpChangeRecord record = new UserExpChangeRecord(ExpConstants.AUTHENTICATION, ExpConstants.INCOME, userExp, 50, userExp+50, userId);
				userExpChangeRecordService.save(record);
				log.info("InfoMsg:--- phone_authentication end");
				return response.success(message);
			}else {
				log.info("InfoMsg:--- phone_authentication end");
				return response.failure(message);
			}
		} catch (Exception e) {
			log.error("errorMsg:--- phone_authentication occur error " + e.getMessage());
			return response.failure(e.getMessage());
		}
	}
	
	/**
	 * 学历认证
	 * 
	 * @param phone
	 * @param verifyCode
	 * @return
	 */
	@RequestMapping(value=Router.Personal.EDUCATION_AUTHENTICATION,method=RequestMethod.POST)
	@ResponseBody
	public Response education_authentication(MultipartHttpServletRequest request,@RequestParam("userId") int userId
			,@RequestParam("certNumber") String certNumber,@RequestParam("authType") String authType) {
		log.info("InfoMsg:--- education_authentication start");
		Response response = this.getReponse();
		BufferedInputStream is = null;  
		BufferedOutputStream out = null;  // 准备好一个输出的对象
		CommonsMultipartFile multipartFile = null;
        String showUrl = "";
		try {
			PageData pd = new PageData<>();
			pd.put("userId", userId);
			pd.put("authType", "cert");
			if(!userAuthenticationService.isAuthentication(pd)) {
				return response.failure("请先进行实名认证");
			}
			Iterator<String> itr =  request.getFileNames();
            while(itr.hasNext()){
                 String str = itr.next();
                 multipartFile = (CommonsMultipartFile)request.getFile(str);
                 String[] fileExts = {"jpg", "png"};
                 String fileName = multipartFile.getOriginalFilename();   //原文件名
                 String fileExt = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length());
                 if (Arrays.binarySearch(fileExts, fileExt) != -1) {
                     MultipartFile mpf = request.getFile(str);
                     InputStream inputStream = mpf.getInputStream();
                     is = new BufferedInputStream(inputStream);
//                     String url = "D:\\programmeTools\\nginx-1.12.1\\html\\photo\\auth" + "/" +  MD5_UTIL.string2MD5(OrderGeneratedUtils.getOrderNo()) + "." + fileExt;
                     String url = "/data01/nginxdata/photo/auth" + "/" +  MD5_UTIL.string2MD5(OrderGeneratedUtils.getOrderNo()) + "." + fileExt;
                     File newFile = new File(url);
                     if(is != null) {
                         out = new BufferedOutputStream(new FileOutputStream(newFile));  
                         byte[] buffer = new byte[1024];  
                         int len = -1;  
                         while ((len = is.read(buffer)) != -1) {  
                             out.write(buffer, 0, len);  
                         }
                         String nickName = appUserService.findUserNameByUserId(userId);
//                         showUrl = url.replace("D:\\programmeTools\\nginx-1.12.1\\html\\photo\\auth", "http://localhost:8761/photo/auth");
                         showUrl = url.replace("/data01/nginxdata/photo/auth", "http://www.xunxinkeji.cn:8761/photo/auth");
                         String authRemark = "用户:" + nickName + "于:---" + PeriodsUtil.getWholeTime(new Date()) + "进行了学历认证";
                         UserAuthentication auth = new UserAuthentication(certNumber, authType, UserEntity.UNUSUAL, showUrl, authRemark, new Date(), userId);
                         userAuthenticationService.save(auth);
                     }
                 }else {
                    return response.failure("该文件类型不能够上传");
                 }
            }
            //手机认证动态记录
            UserDynamicRecordVO vo = new UserDynamicRecordVO(0, "", "进行了学历认证", DynamicConstants.AUTHENT_CHANGE, "", userId, 0);
            userDynamicRecordService.save(vo);
            //赠送积分
//            int userExp = user.getUserExp();
//            appUserService.user_exp_change(userId, userExp + 50);
            //生成积分记录
//            UserExpChangeRecord record = new UserExpChangeRecord(ExpConstants.AUTHENTICATION, ExpConstants.INCOME, userExp, 50, userExp+50, userId);
//            userExpChangeRecordService.save(record);
			log.info("InfoMsg:--- education_authentication end");
			return response.success();
		} catch (Exception e) {
			log.error("errorMsg:--- education_authentication occur error " + e.getMessage());
			return response.failure(e.getMessage());
		}finally {
			if(is != null) {  
                try {  
                    is.close();  
                }catch (Exception e) {  
                    e.printStackTrace();  
                }  
            }  
            if(out != null) {  
                try {  
                    out.close();  
                }catch (Exception e) {  
                    e.printStackTrace();  
                }  
            }  
		}
		
	}
	
	/**
	 * 发送认证邮件
	 * 
	 * @param phone
	 * @param verifyCode
	 * @return
	 */
	@RequestMapping(value=Router.Personal.MAIL_AUTHENTICATION,method=RequestMethod.POST)
	@ResponseBody
	public Response mail_authentication(@RequestParam("userId") int userId,@RequestParam("email") String email,
			@RequestParam("authType") String authType) {
		log.info("InfoMsg:--- 发送认证邮件开始");
		Response response = this.getReponse();
		PageData pd = new PageData<>();
		try {
			PageData authPd = new PageData<>();
			pd.put("userId", userId);
			pd.put("authType", "cert");
			if(!userAuthenticationService.isAuthentication(authPd)) {
				return response.failure("请先进行实名认证");
			}
		    UserEntity user = appUserService.findById(userId);
		    String ID = user.getID();
		    String name = user.getName();
		    pd.put("id", userId);
		    pd.put("email", email);
		    String text = JSON.toJSONString(pd); 
            String URL = "http://www.xunxinkeji.cn/app-api/personal";
            String token = SymmetricEncoder.AESEncode(KEY_STR,text.toString());
            String content = "<p>亲爱的"+name+",您好。<br><br>您于:"+ PeriodsUtil.getWholeTime(new Date()) +"通过帐号:"+ID+"申请了循心APP的邮箱认证，请点击如下链接完成认证."
                    +"<br><a href='"+URL+"/activate_mail/?token="+token+"&email="+email+"'>"
                    +URL+"/activate_mail/?token="+token+"&email="+email+"</a><br><br>(如果您无法点击此链接，请将其复制到浏览器地址栏后访问)<br>为了保障您帐号的安全性，请在24小时内完成认证，此链接将在认证后失效！</p>";
            SendEmail.send(email, content);
			
            UserAuthentication auth = new UserAuthentication(email, "mail", 1, "", "", new Date(), userId);
            userAuthenticationService.save(auth);
			log.info("InfoMsg:--- 发送认证邮件结束");
			return response.success();
		} catch (Exception e) {
			log.error("errorMsg:--- 发送认证邮件失败：" + e.getMessage());
			return response.failure(e.getMessage());
		}
	}
	
	
	/**
	 * 邮箱认证异步通知
	 * 
	 * @param phone
	 * @param verifyCode
	 * @return
	 */
	@RequestMapping(value=Router.Personal.ACTIVATE_MAIL,method=RequestMethod.GET)
	@ResponseBody
	public ModelAndView activate_mail(@RequestParam("email") String email,@RequestParam("token") String token) {
	    log.info("InfoMsg:--- 邮箱激活认证开始");
	    ModelAndView mv = this.getModelAndView();
	    PageData pd = new PageData<>();
	    String msg = "";
	    try {
	        if(StringUtils.trim(token).equals("") && StringUtils.isBlank(token)) {
	            return new ModelAndView("/error");
	        }
	        String jsonObj = SymmetricEncoder.AESDncode(KEY_STR,token);
	        JSONObject obj = JSON.parseObject(jsonObj);
	        int userId = Integer.parseInt(obj.getString("id"));
	        UserEntity user = appUserService.findById(userId);
	        UserAuthentication auth = userAuthenticationService.model(userId, "mail");
	        if(null != auth) {
	            if((PeriodsUtil.addDate(auth.getAuthTime()) + 1000*60*60*24) < PeriodsUtil.addDate(new Date())) {
	                msg = "亲爱的用户，很抱歉，您的认证信息已超过有效期！";
	            }else {
	                msg = "亲爱的用户，恭喜您认证成功。";
	                appUserService.setEmail(userId,email);
	                PageData emailPd = new PageData<>();
	                emailPd.put("userId", userId);
	                emailPd.put("authType", "mail");
	                emailPd.put("authState", 2);
	                String authRemark = user.getNickName() + "于:" + PeriodsUtil.getWholeTime(new Date()) + "进行了实名认证.";
	                emailPd.put("authRemark", authRemark);
	                emailPd.put("authTime", new Date());
	                userAuthenticationService.update(emailPd);
	                //认证动态记录
                    UserDynamicRecordVO vo = new UserDynamicRecordVO(0, "", "我新增了邮箱认证。", DynamicConstants.AUTHENT_CHANGE, "", userId, 0);
                    userDynamicRecordService.save(vo);
        	        //赠送积分
                    int userExp = user.getUserExp();
                    appUserService.user_exp_change(userId, userExp + 50);
        	        //生成积分记录
                    UserExpChangeRecord record = new UserExpChangeRecord(ExpConstants.AUTHENTICATION, ExpConstants.INCOME, userExp, 50, userExp+50, userId);
                    userExpChangeRecordService.save(record);
	            }
	        }
	        pd.put("msg", msg);
	        mv.addObject("pd", pd);
	        mv.setViewName("jsp/platform/notice");
	        log.info("InfoMsg:--- 邮箱激活认证结束");
	        return mv;
	    } catch (Exception e) {
	        log.error("errorMsg:--- 邮箱激活认证失败:" + e.getMessage() + "---}");
	        return new ModelAndView("/error");
	    }
	}
	
	
	/**
	 * 实名认证
	 *     https://market.aliyun.com/products/56928004/cmapi014760.html?spm=5176.730005.0.0.lngTI6#sku=yuncode876000009
	 * @param phone
	 * @param verifyCode
	 * @return
	 */
	@RequestMapping(value=Router.Personal.CERTIFICATION_AUTHENTICATION,method=RequestMethod.POST)
	@ResponseBody
	public Response certification_authentication(@RequestParam(value="userId") int userId,@RequestParam(value="authType") String authType,
			@RequestParam(value="certNo") String certNo) {
		log.info("InfoMsg:--- certification_authentication start");
		Response response = this.getReponse();
		try {
		    UserEntity user = appUserService.findById(userId);
			String result = personalAuthenticationService.certification_authentication(userId,certNo,authType);
			System.out.println(result);
			log.info("InfoMsg:--- certification_authentication end");
			if(result.equals("匹配")) {
			    String authRemark = user.getNickName() + "于:" + PeriodsUtil.getWholeTime(new Date()) + "进行了实名认证.";
			    UserAuthentication auth = new UserAuthentication("进行了手机认证", authType, 2, "", authRemark, new Date(), userId);
			    userAuthenticationService.save(auth);
			    //手机认证动态记录
                UserDynamicRecordVO vo = new UserDynamicRecordVO(0, "", "我新增了手机认证", DynamicConstants.AUTHENT_CHANGE, "", userId, 0);
                userDynamicRecordService.save(vo);
                //赠送积分
                int userExp = user.getUserExp();
                appUserService.user_exp_change(userId, userExp + 50);
                //生成积分记录
                UserExpChangeRecord record = new UserExpChangeRecord(ExpConstants.AUTHENTICATION, ExpConstants.INCOME, userExp, 50, userExp+50, userId);
                userExpChangeRecordService.save(record);
			}
			return response.success();
		} catch (Exception e) {
			log.error("errorMsg:--- certification_authentication occur error " + e.getMessage());
			return response.failure(e.getMessage());
		}
	}
	
	
	/**
	 * 职业认证
	 * 
	 * @param phone
	 * @param verifyCode
	 * @return
	 */
	@RequestMapping(value=Router.Personal.PROFESSION_AUTHENTICATION,method=RequestMethod.POST)
	@ResponseBody
	public Response profession_authentication(MultipartHttpServletRequest request,@RequestParam(value="userId") int userId,
			@RequestParam(value="authType") String authType) {
		log.info("InfoMsg:--- profession_authentication start");
		Response response = this.getReponse();
		BufferedInputStream is = null;  
		BufferedOutputStream out = null;  // 准备好一个输出的对象
		CommonsMultipartFile multipartFile = null;
		String showUrl = "";
		try {
			PageData pd = new PageData<>();
			pd.put("userId", userId);
			pd.put("authType", "cert");
			if(!userAuthenticationService.isAuthentication(pd)) {
			    log.info("InfoMsg:--- profession_authentication end");
				return response.failure("请先进行实名认证");
			}
			Iterator<String> itr =  request.getFileNames();
            while(itr.hasNext()){
                 String str = itr.next();
                 multipartFile = (CommonsMultipartFile)request.getFile(str);
                 String[] fileExts = {"jpg", "png"};
                 String fileName = multipartFile.getOriginalFilename();   //原文件名
                 String fileExt = fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length());
                 if (Arrays.binarySearch(fileExts, fileExt) != -1) {
                     MultipartFile mpf = request.getFile(str);
                     InputStream inputStream = mpf.getInputStream();
                     is = new BufferedInputStream(inputStream);
//                     String url = "D:\\programmeTools\\nginx-1.12.1\\html\\photo\\auth" + "/" + MD5_UTIL.string2MD5(OrderGeneratedUtils.getOrderNo()) + "." + fileExt;
                     String url = "/data01/nginxdata/photo/auth" + "/" + MD5_UTIL.string2MD5(OrderGeneratedUtils.getOrderNo()) + "." + fileExt;
                     File newFile = new File(url);
                     if(is != null) {
                         out = new BufferedOutputStream(new FileOutputStream(newFile));  
                         byte[] buffer = new byte[1024];  
                         int len = -1;  
                         while ((len = is.read(buffer)) != -1) {  
                             out.write(buffer, 0, len);  
                         }
                         String nickName = appUserService.findUserNameByUserId(userId);
//                         showUrl = url.replace("D:\\programmeTools\\nginx-1.12.1\\html\\photo\\auth", "http://localhost:8761/photo/auth");
                         showUrl = url.replace("/data01/nginxdata/photo/auth", "http://www.xunxinkeji.cn:8761/photo/auth");
                         String authRemark = "用户:" + nickName + "于:---" + PeriodsUtil.getWholeTime(new Date()) + "进行了--" + authType + "认证";
                         UserAuthentication auth = new UserAuthentication(showUrl, authType, UserEntity.UNUSUAL, showUrl, authRemark, new Date(), userId);
                         userAuthenticationService.save(auth);
                     }
                 }else {
                    return response.failure("该文件类型不能够上传");
                 }
            }
            //手机认证动态记录
//            UserDynamicRecordVO vo = new UserDynamicRecordVO(0, "", "进行的手机认证", DynamicConstants.AUTHENT_CHANGE, "", userId, 0);
//            userDynamicRecordService.save(vo);
            //赠送积分
//            int userExp = user.getUserExp();
//            appUserService.user_exp_change(userId, userExp + 50);
            //生成积分记录
//            UserExpChangeRecord record = new UserExpChangeRecord(ExpConstants.AUTHENTICATION, ExpConstants.INCOME, userExp, 50, userExp+50, userId);
//            userExpChangeRecordService.save(record);
			log.info("InfoMsg:--- profession_authentication end");
			return response.success();
		} catch (Exception e) {
			log.error("errorMsg:--- profession_authentication occur error " + e.getMessage());
			return response.failure(e.getMessage());
		}finally {
			if(is != null) {  
                try {  
                    is.close();  
                }catch (Exception e) {  
                    e.printStackTrace();  
                }  
            }  
            if(out != null) {  
                try {  
                    out.close();  
                }catch (Exception e) {  
                    e.printStackTrace();  
                }  
            }  
		}
	}
	
	/**
	 * 芝麻分认证
	 * 
	 * @param phone
	 * @param verifyCode
	 * @return
	 */
	@RequestMapping(value=Router.Personal.SESAME_AUTHENTICATION,method=RequestMethod.POST)
	@ResponseBody
	public Response sesame_authentication(@RequestParam(value="userId") int userId,@RequestParam("authType") String authType,
			@RequestParam(value="phone") String phone,@RequestParam(value="verifyCode") String verifyCode) {
		log.info("InfoMsg:--- sesame_authentication start");
		Response response = this.getReponse();
		try {
			PageData pd = new PageData<>();
			pd.put("userId", userId);
			pd.put("authType", "cert");
			if(!userAuthenticationService.isAuthentication(pd)) {
				return response.failure("请先进行实名认证");
			}
			//手机认证动态记录
//            UserDynamicRecordVO vo = new UserDynamicRecordVO(0, "", "进行的手机认证", DynamicConstants.AUTHENT_CHANGE, "", userId, 0);
//            userDynamicRecordService.save(vo);
            //赠送积分
//            int userExp = user.getUserExp();
//            appUserService.user_exp_change(userId, userExp + 50);
            //生成积分记录
//            UserExpChangeRecord record = new UserExpChangeRecord(ExpConstants.AUTHENTICATION, ExpConstants.INCOME, userExp, 50, userExp+50, userId);
//            userExpChangeRecordService.save(record);
			log.info("InfoMsg:--- sesame_authentication end");
			return response.success();
		} catch (Exception e) {
			log.error("errorMsg:--- sesame_authentication occur error " + e.getMessage());
			return response.failure(e.getMessage());
		}
	}
	
	/**
	 * 我的认证信息
	 * 
	 * @param phone
	 * @param verifyCode
	 * @return
	 */
	@RequestMapping(value=Router.Personal.PERSONAL_AUTHENTICATION,method=RequestMethod.POST)
	@ResponseBody
	public Response personal_authentication(@RequestParam(value="userId") int userId) {
	    log.info("InfoMsg:--- 获取我的认证信息开始");
	    PageData pd = new PageData<>();
	    Response response = this.getReponse();
	    try {
	        UserEntity user = appUserService.findById(userId);
	        pd.put("name", user.getName());
	        pd.put("telephone", user.getPhone());
	        pd.put("email", user.getEmail());
	        List<UserAuthentication> authentList = userAuthenticationService.getAll(userId);
	        pd.put("phone", UserEntity.NORMAL);
	        pd.put("certification", UserEntity.NORMAL);
	        pd.put("education", UserEntity.NORMAL);
	        pd.put("mail", UserEntity.NORMAL);
	        pd.put("profession", UserEntity.NORMAL);
	        pd.put("sesame", UserEntity.NORMAL);
	        String[] authentType = new String[] {"phone","certification","education","mail","profession","sesame"};
	        for(UserAuthentication authent : authentList){
	            if(authent.getAuthType().equals(authentType[0])) {
	                pd.put("phone", authent.getAuthState());
	            }
	            if(authent.getAuthType().equals(authentType[1])) {
	                pd.put("certification", authent.getAuthState());
	            }
	            if(authent.getAuthType().equals(authentType[2])) {
	                pd.put("education", authent.getAuthState());
	            }
	            if(authent.getAuthType().equals(authentType[3])) {
	                pd.put("mail", authent.getAuthState());
	            }
	            if(authent.getAuthType().equals(authentType[4])) {
	                pd.put("profession", authent.getAuthState());
	            }
	            if(authent.getAuthType().equals(authentType[5])) {
	                pd.put("sesame", authent.getAuthState());
	            }
	        }
	        log.info("InfoMsg:--- 获取我的认证信息结束");
	        return response.success(pd);
	    } catch (Exception e) {
	        log.error("errorMsg:{--- 获取我的认证信息失败： " + e.getMessage() + "---}");
	        return response.failure(e.getMessage());
	    }
	}
	
	/**
	 * 认证信息详情
	 * 
	 * @param phone
	 * @param verifyCode
	 * @return
	 */
	@RequestMapping(value=Router.Personal.PERSONAL_AUTHENTICATION_DETAIL,method=RequestMethod.POST)
	@ResponseBody
	public Response personal_authentication_detail(@RequestParam(value="userId") int userId,@RequestParam(value="authType") String authType) {
	    log.info("InfoMsg:--- 获取认证信息详情开始");
	    PageData pd = new PageData<>();
	    Response response = this.getReponse();
	    try {
	        UserAuthentication UserAuthentication = userAuthenticationService.model(userId, authType);
	        log.info("InfoMsg:--- 获取认证信息详情结束");
	        return response.success(UserAuthentication);
	    } catch (Exception e) {
	        log.error("errorMsg:{--- 获取认证信息详情失败： " + e.getMessage() + "---}");
	        return response.failure(e.getMessage());
	    }
	}
	
	
	
}
