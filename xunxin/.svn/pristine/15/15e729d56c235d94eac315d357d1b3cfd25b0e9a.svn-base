package com.xunxin.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Timer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Repository;

import com.xunxin.config.RedisRepository;
import com.xunxin.dao.impl.app.ArecordDaoImpl;
import com.xunxin.dao.qa.SysDictMapper;
import com.xunxin.dao.qa.XunxinAuditInformationRecordMapper;
import com.xunxin.dao.qa.XunxinUserAuditMapper;
import com.xunxin.dao.qa.XunxinUserDeviceTokenMapper;
import com.xunxin.service.app.AppUserService;
import com.xunxin.service.app.QASectionService;
import com.xunxin.service.app.UserFriendsService;
import com.xunxin.service.app.qa.QuestionVOManagerService;
import com.xunxin.util.CalcDemo;
import com.xunxin.vo.qa.ArecordVO;
import com.xunxin.vo.qa.QASection;
import com.xunxin.vo.qa.QuestionVO;
import com.xunxin.vo.qa.SysDict;
import com.xunxin.vo.qa.XunxinUserAudit;
import com.xunxin.vo.qa.XunxinUserAuditExample;
import com.xunxin.vo.qa.XunxinUserDeviceToken;

@Repository
public class ArecordService  extends ArecordDaoImpl{

	/*@Autowired
	private ArecordDao arecordDao;*/
	
	@Autowired
	XunxinUserAuditMapper xunxinUserAuditMapper;
	
	@Autowired
	SysDictMapper sysDictMapper;
	
	@Autowired
	private QASectionService qectionService;
	
	@Autowired
	private XunxinUserDeviceTokenMapper xunxinUserDeviceTokenMapper;
	
	@Autowired
	private XunxinAuditInformationRecordMapper xunxinAuditInformationRecordMapper;
	
	@Autowired
	private QASectionService QASectionService;
	@Autowired
	QuestionVOManagerService questionVOManagerService;
	@Autowired
	private AppUserService appUserService;
	@Autowired
	private UserFriendsService userFriendsService;
	
	public List<QASection> auditList(Integer userId, List<QASection> qsList, String answerNum) {
		
		List<QASection> list = new ArrayList();
		
		

		
		for (QASection qaSection : qsList) {
			double exec = 0.01;
			Query query = new Query();
			query.addCriteria(Criteria.where("type").is(qaSection.getSectionType()));
			query.addCriteria(Criteria.where("isDelete").is(false));
			Integer count = findCountByQuery(query);
			
			Query queryOwn = new Query();
			queryOwn.addCriteria(Criteria.where("type").is(qaSection.getSectionType()));
			queryOwn.addCriteria(Criteria.where("isDelete").is(false));
			queryOwn.addCriteria(Criteria.where("AnswerID").is(userId));
			Integer countOwn = findCountByQuery(query);
			
			if(countOwn>0){
				 exec = CalcDemo.exec(countOwn+"/"+count);
			}
			
			
			if(exec > Double.parseDouble(answerNum)){
				list.add(qaSection);
				XunxinUserAuditExample xunxinUserAudit = new XunxinUserAuditExample();
				XunxinUserAudit audit = new XunxinUserAudit();
				audit.setIsDelete("0");
				audit.setUserId(userId);
				audit.setType(qaSection.getSectionType());
				audit.setAnswerProportion(exec);
				audit.setUpdateTime(new Date());
				
				
				com.xunxin.vo.qa.XunxinUserAuditExample.Criteria createCriteria = xunxinUserAudit.createCriteria();
				createCriteria.andUserIdEqualTo(userId);
				createCriteria.andTypeEqualTo((byte)qaSection.getSectionType());
				createCriteria.andIsDeleteEqualTo("0");
				
				List<XunxinUserAudit> selectByExample = xunxinUserAuditMapper.selectByExample(xunxinUserAudit);
				
				if(selectByExample != null && selectByExample.size()>0){
					xunxinUserAuditMapper.updateByPrimaryKey(audit);
				}else{
					audit.setCreateTime(new Date());
					xunxinUserAuditMapper.insert(audit);
				}
			}
			
		}
		List<XunxinUserAudit> listAudit = xunxinUserAuditMapper.findListUserId(userId);
		if(list != null && listAudit.size() >0){
			for (int i = 0; i < listAudit.size(); i++) {
				if(i<1){
					continue;
				}
				listAudit.get(i).setIsDelete("1");
				xunxinUserAuditMapper.updateByPrimaryKey(listAudit.get(i));
				
			}
		}
		return list;
	}

	public boolean questionAudit(String questionId, Integer type) throws Exception {
		
		Integer auditNum = null;
		boolean flag = false;
		
		boolean auditNumredis = RedisRepository.exists("auditNum");
		
		if(!auditNumredis){
			List<SysDict> dict =sysDictMapper.findDictByType("audit_Num");
			if(dict != null && dict.size()> 0 && dict.get(0).getLabel() != null){
				auditNum = Integer.valueOf(dict.get(0).getLabel());
				RedisRepository.set("auditNum", auditNum);
			}
		}else{
			auditNum = Integer.valueOf((String) RedisRepository.get("auditNum"));
			if(auditNum == null ){
				List<SysDict> dict =sysDictMapper.findDictByType("audit_Num");
				if(dict != null && dict.size()> 0 && dict.get(0).getLabel() != null){
					auditNum = Integer.valueOf(dict.get(0).getLabel());
					RedisRepository.set("auditNum", auditNum);
				}
			}
		}
		
		List<XunxinUserAudit> users = xunxinUserAuditMapper.findAuditUserLogin(type,auditNum);
		
		if(users == null && users.size() < auditNum){
			return flag;
		}else{
			//QASection findOneById = qectionService.findOneById(questionId);
			QuestionVO questionVO = new QuestionVO();
			questionVO.setId("adsfsgshsthy");
			questionVO.setName("审核测试");
			if(questionVO != null ){
				for (XunxinUserAudit userEntity : users) {
					XunxinUserDeviceToken user = xunxinUserDeviceTokenMapper.selectByPrimaryKey(userEntity.getUserId());
					if(user != null && user.getDeviceToken() != null){
					
					/*UpushUtils.sendIOSUnicast(UpushConstants.APP_appkey,UpushConstants.IOS_appMasterSecret,
							
							user.getDeviceToken(), "测试", 0, "测试", "gvf", JacksonUtil.Builder().obj2Json(questionVO));*/
					}
				}
				
				//定时审核任务
				Timer timer = new Timer();
		        // 三秒后开始执行，每隔一秒执行一次
		        timer.schedule(new AuditimerTask(questionId,auditNum,timer,new Date(),type,xunxinAuditInformationRecordMapper,xunxinUserAuditMapper,
		        		xunxinUserDeviceTokenMapper,QASectionService,questionVOManagerService), 1000, 1000);
				return true;
				
			}else{
				return flag;
			}
			
		}
		
	}

	public List<Integer> findMoment(Integer userId) {
		List<Integer> idList =appUserService.findAllNotUserId(userId);
		Query query = new Query();
		query.addCriteria(Criteria.where("isDelete").is(false));
		query.addCriteria(Criteria.where("userId").is(userId));
		query.with(new Sort(new Order(Direction.DESC, "createTime")));
		query.limit(10);
		List<ArecordVO> list = find(query);
		for (Integer id : idList) {
			for (ArecordVO arecordVO : list) {
				Query queryTwo = new Query();
				queryTwo.addCriteria(Criteria.where("isDelete").is(false));
				queryTwo.addCriteria(Criteria.where("userId").is(userId));
				queryTwo.addCriteria(Criteria.where("answers").is(arecordVO.getAnswerID()));
				ArecordVO arecordVO1 = findOneByQuery(queryTwo);
			}

			
		}

		return null;
	}




	
	
}