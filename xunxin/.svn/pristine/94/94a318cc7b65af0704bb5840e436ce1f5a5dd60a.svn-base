package com.xunxin.controller.app.comment;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.mongodb.framework.util.Pagination;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.xunxin.config.RedisRepository;
import com.xunxin.controller.system.BaseController;
import com.xunxin.service.app.AppUserService;
import com.xunxin.service.app.CommentService;
import com.xunxin.service.app.EmpathyCircleService;
import com.xunxin.service.app.GiveUpService;
import com.xunxin.service.app.IMRecordService;
import com.xunxin.service.app.UserFriendsService;
import com.xunxin.service.app.XunxinUserDeviceTokenService;
import com.xunxin.service.app.circle.CircleCommentService;
import com.xunxin.service.app.qa.CommentTopService;
import com.xunxin.vo.qa.CommentVO;
import com.xunxin.web.api.bean.Response;
import com.xunxin.web.api.bean.Router;

/**
 * 
 * @Author gyf
 * @Compile 2017年11月13日 -- 下午13:26
 * @Version 1.0
 * @Description	QA评论
 */
@Controller
@RequestMapping(value=Router.PATH+Router.Comment.PATH)
public class CommentController extends BaseController{
	
	private static final Logger log = Logger.getLogger(CommentController.class);
	
	@Autowired 
	private CommentService commentService;
	@Autowired
	private AppUserService appUserService;
	@Autowired
	private XunxinUserDeviceTokenService xunxinUserDeviceTokenService;
	@Autowired
	private GiveUpService giveUpService; 
	@Autowired
	private IMRecordService iMRecordService;
	@Autowired                   
	private CircleCommentService circleCommentService;
	@Autowired
	private UserFriendsService userFriendsService;
	@Autowired
	private CommentTopService commentTopService;
	/**
	 * 用户填写评论
	 * 
	 * @return
	 */
	@RequestMapping(value=Router.Comment.SAVE_COMMENT,method=RequestMethod.POST)
	@ResponseBody
	public Response save_comment(@RequestParam("userId") Integer userId,@RequestParam("questionId") String questionId,@RequestParam("content") String content,
			Integer replyUserId,String commentId) {
		log.info("infoMsg:--- 保存用户评论开始");
		Response res = this.getReponse();
		try {
			if(Integer.valueOf(userId) == null || questionId== null || "".equals(questionId) || content == null || "".equals("content")){
				return res.failure("参数不完整");
			}
			if(userId.equals(replyUserId)){
				return res.failure("不能给自己回复");
			}
			int count = 0;
			 char[] c = content.toCharArray();
		        for(int i = 0; i < c.length; i ++)
		        {
		            String len = Integer.toBinaryString(c[i]);
		            if(len.length() > 8){
		                count ++;
		                if(count >30){
		                	return res.failure("评论字数超过30");
		                }
		            }
		        }
		        
				String phone = appUserService.findUserPhoneByUserId(userId);
				boolean flag = RedisRepository.exists("limit"+phone);
				if(!flag){
					boolean frequency = circleCommentService.isFrequency(userId);
					if(!frequency){
						CommentVO comment = commentService.saveComment(userId,questionId,content,replyUserId,commentId);
						log.info("infoMsg:--- 用户保存评论结束");
						return res.success(comment);
					}else{
						Map<String, Object> map = new HashMap<>();
						Date now = new Date();
						map.put("limit", 1);
						map.put("time", new Date(now .getTime() + 60000));
						RedisRepository.setMap("limit"+phone, map);
						return res.failure("您的回复太频繁");
					}
				}else{
					Map<String, Object> map = RedisRepository.getMap("limit"+phone);
					Date date =new Date();
					date.setTime(Long.parseLong((String) map.get("time")));
					Date now = new Date();
					if(date.getTime()>now.getTime()){
						return res.failure("您被限制回复"+map.get("limit")+"分钟");
					}else{
						boolean frequency = circleCommentService.isFrequency(userId);
						if(!frequency){
							CommentVO comment = commentService.saveComment(userId,questionId,content,replyUserId,commentId);
							log.info("infoMsg:--- 用户保存评论结束");
							return res.success(comment);
						}else{
							Integer limit = Integer.valueOf((String) map.get("limit"));
							Date datelimt = null;
							Integer limitNow = null;
							if(limit.equals(1)){
								limitNow = 30;
								datelimt = new Date(new Date().getTime()+60000*30);
							}
							else if(limit.equals(30)){
								limitNow = 60;
								datelimt = new Date(new Date().getTime()+60000*30*2);
							}else if(limit.equals(60)){
								limitNow = 60;
								datelimt = new Date(new Date().getTime()+60000*30*2);
							}else{
								limitNow = 1;
								datelimt = new Date(new Date().getTime()+60000);
							}
							map.put("limit", limitNow);
							map.put("time", datelimt);
							RedisRepository.del("limit"+phone);
							RedisRepository.setMap("limit"+phone, map);
							
							return res.failure("您的回复太频繁");
						}
					}
				}
		} catch (Exception e) {
			log.error("errorMsg:--- 用户保存评论失败" + e.getMessage());
			return res.failure(e.getMessage());
		}
	}
	
	/**
	 * 查询问题评论列表
	 * 
	 * @return
	 */
	@RequestMapping(value=Router.Comment.QUERY_COMMENT_LIST,method=RequestMethod.POST)
	@ResponseBody
	public Response query_comment_list(@RequestParam(value = "pageNo", defaultValue = "1") Integer pageNo,
			@RequestParam(value = "pageSize", defaultValue = "100") Integer pageSize,
			@RequestParam("questionId") String questionId,Integer userId) {
		log.info("infoMsg:--- 查询问题评论列表开始");
		Response res = this.getReponse();
		try {
			Pagination<CommentVO> commentList= commentService.findCommentLis(questionId,userId,pageNo,pageSize);
			log.info("infoMsg:--- 查询问题评论列表结束");
			return res.success(commentList);
		} catch (Exception e) {
			log.error("errorMsg:--- 查询问题评论列表失败" + e.getMessage());
			return res.failure(e.getMessage());
		}
	}
	/**
	 * 查询评论回复列表
	 * 
	 * @return
	 */
	@SuppressWarnings("unused")
	@RequestMapping(value=Router.Comment.QUERY_REPLY_LIST,method=RequestMethod.POST)
	@ResponseBody
	public Response query_reply_list(@RequestParam("commentId") String commentId,Integer userId) {
		log.info("infoMsg:--- 查看评论的回复列表开始");
		Response res = this.getReponse();
		try {
			List<CommentVO> commentList =commentService.findReplyList(commentId,userId);
			log.info("infoMsg:--- 查看评论的回复列表结束");
			
			return res.success(commentList);
		} catch (Exception e) {
			log.error("errorMsg:--- 查看评论的回复列表失败" + e.getMessage());
			return res.failure(e.getMessage());
		}
	}
	@SuppressWarnings("unused")
	@RequestMapping(value=Router.Comment.QUERY_COMMUNICATION,method=RequestMethod.POST)
	@ResponseBody
	public Response query_communication(@RequestParam("questionId") String questionId,@RequestParam("userId") Integer userId,@RequestParam("replyUserId") Integer replyUserId) {
		log.info("infoMsg:--- 查看双方的回复列表开始");
		Response res = this.getReponse();
		try {
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			List<CommentVO> commentList =commentService.findAllcommunication(userId,replyUserId,questionId);
			for (CommentVO comment : commentList) {
				if(comment != null && (Integer)comment.getUserId() !=null){
					comment.setGender(appUserService.findUserGenderByUserId(comment.getUserId()));
					comment.setNickName(appUserService.findUserNameByUserId(comment.getUserId()));
				}
				if(comment != null && (Integer)comment.getReplyUserId() ==null){
					comment.setReployName((appUserService.findUserNameByUserId(comment.getReplyUserId())));
				}
				if(comment.getCreateTime() != null){
					Date dateOne = UserFriendsService.getCurrentTime(60);
					Date dateTwo = UserFriendsService.getCurrentTime(60*2);
					if(comment.getCreateTime().getTime()>dateOne.getTime()){
						comment.setCreateDate("一小时前");
					}
					else if(comment.getCreateTime().getTime()>dateTwo.getTime()){
						comment.setCreateDate("两小时前");
					}
					else{
						comment.setCreateDate(formatter.format(comment.getCreateTime()));
					}
				}
			}
			log.info("infoMsg:--- 查看双方的回复列表结束");
			return res.success(commentList);
		} catch (Exception e) {
			log.error("errorMsg:--- 查看双方的回复列表失败" + e.getMessage());
			return res.failure(e.getMessage());
		}
	}
	@RequestMapping(value=Router.Comment.TO_GIVE_UP,method=RequestMethod.POST)
	@ResponseBody
	public Response to_give_up(String questionId,  Integer userId, String commentId, Integer giveUp) {
		log.info("infoMsg:--- 点赞开始");
		Response res = this.getReponse();
		try {
			if(userId == null || commentId == null || giveUp == null){
				log.error("errorMsg:--- 参数不完整");
				return res.failure("参数不完整");
			}
			giveUpService.saveOrupdate(questionId,userId,commentId,giveUp);
			
				log.info("infoMsg:--- 点赞结束");
				return res.success("suuess");
		} catch (Exception e) {
			log.error("errorMsg:--- 点赞失败" + e.getMessage());
			return res.failure(e.getMessage());
		}
	}
	
	/**
	 * 用户DeviceToken保存
	 * 
	 * @return
	 */
	@RequestMapping(value=Router.Comment.SAVE_DEVICE_TOKEN,method=RequestMethod.POST)
	@ResponseBody
	public Response save_device_token(@RequestParam("userId") Integer userId,@RequestParam("deviceToken") String deviceToken,@RequestParam("type") String type) {
		log.info("infoMsg:--- 用户DeviceToken保存开始");
		Response res = this.getReponse();
		try {
			int insert = xunxinUserDeviceTokenService.save(userId,deviceToken,type);
			log.info("infoMsg:--- 用户DeviceToken保存结束");
			if(insert>0){
				return res.success("success");
			}else{
				return res.failure("保存失败");
			}
		} catch (Exception e) {
			log.error("errorMsg:--- 用户DeviceToken保存失败" + e.getMessage());
			return res.failure(e.getMessage());
		}
	}
	@RequestMapping(value=Router.Comment.TO_COMMENT_TOP,method=RequestMethod.POST)
	@ResponseBody
	public Response to_comment_top(String questionId,  Integer userId, String commentId, Integer isTop) {
		log.info("infoMsg:--- 点赞开始");
		Response res = this.getReponse();
		try {
			if(userId == null || commentId == null || isTop == null || questionId == null){
				log.error("errorMsg:--- 参数不完整");
				return res.failure("参数不完整");
			}
			commentTopService.saveOrupdate(questionId,userId,commentId,isTop);
			
				log.info("infoMsg:--- 点赞结束");
				return res.success("suuess");
		} catch (Exception e) {
			log.error("errorMsg:--- 点赞失败" + e.getMessage());
			return res.failure(e.getMessage());
		}
	}
}
