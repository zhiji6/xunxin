package com.xunxin.controller.app.square;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.xunxin.controller.system.BaseController;
import com.xunxin.service.ArecordService;
import com.xunxin.service.app.AppUserService;
import com.xunxin.service.app.qa.QuestionService;
import com.xunxin.service.app.square.ThrowHydrangeaRecordService;
import com.xunxin.util.app.CollectionRandomUtil;
import com.xunxin.vo.qa.ArecordVO;
import com.xunxin.vo.square.ThrowHydrangeaRecord;
import com.xunxin.vo.sys.PageData;
import com.xunxin.vo.user.UserEntity;
import com.xunxin.web.api.bean.Response;
import com.xunxin.web.api.bean.Router;

/**
 * Copyright © 2017 noseparte(Libra) © Like the wind, like rain
 * @Author Noseparte
 * @Compile 2017年11月28日 -- 下午2:42:01
 * @Version 1.0
 * @Description		姻缘树
 */
@Controller
@RequestMapping(value=Router.PATH+Router.Hydrangea.PATH)
public class ThrowHydrangeaController extends BaseController {

	private final static Logger log = Logger.getLogger(ThrowHydrangeaController.class);
	
	@Autowired
	private AppUserService appUserService;
	@Autowired
	private ThrowHydrangeaRecordService throwHydrangeaRecordService;
	@Autowired
	private ArecordService arecordService;
	
	
	/**
	 * 采笺
	 * 
	 * @param userId
	 * @param HydrangeaId  信笺id
	 * @return
	 */
	@RequestMapping(value=Router.Hydrangea.PICK_HYDRANGEA,method=RequestMethod.POST)
	@ResponseBody
	public Response pick_hydrangea(@RequestParam("userId") int userId) {
		log.info("infoMsg:--- 采笺开始");
		Response reponse = this.getReponse();
		PageData pd = new PageData<>();
		String sex = "";
		try {
		    UserEntity user = appUserService.findById(userId);
		    if(user.getGender().equals("男")) {sex = "女"; }
		    else { sex = "男";  }
		    Query query = new Query()
		            .addCriteria(Criteria.where("HydrangeaState").is(1))
		            .addCriteria(Criteria.where("gender").is(sex));
		    List<ThrowHydrangeaRecord> HydrangeaList = throwHydrangeaRecordService.find(query);
		    ThrowHydrangeaRecord record = HydrangeaList.get(new Random().nextInt(HydrangeaList.size()));
		    Update update = new Update().set("HydrangeaState", 0).set("throwId", userId);
		    throwHydrangeaRecordService.updateFirst(new Query().addCriteria(Criteria.where("id").is(record.getId())), update);
			pd.put("hydrangeaId", record.getId());
		    log.info("infoMsg:--- 采笺结束");
			return reponse.success(pd);
		} catch (Exception e) {
			log.info("errorMsg:{--- 采笺失败:" + e.getMessage() + "---}");
			return reponse.failure(e.getMessage());
		}
	}
	
	/**
	 * 投笺(自选)
	 * 
	 * @param userId
	 * @param qaList
	 * @param isSendCircle
	 * @return
	 */
	@RequestMapping(value=Router.Hydrangea.THROW_HYDRANGEA_CUSTOM,method=RequestMethod.POST)
	@ResponseBody
	public Response throw_hydrangea_custom(@RequestParam("userId") int userId,@RequestParam("qaList") String qaList) {
	    log.info("infoMsg:--- 投笺(自选)开始");
	    Response reponse = this.getReponse();
	    try {
	        String[] qArray = qaList.replace("[", "").replace("]", "").trim().split(",");
	        if(qArray.length < 15) {
	            return reponse.failure("话题收藏量不足15,请补充后再试");
	        }
	        ThrowHydrangeaRecord record = new ThrowHydrangeaRecord();
	        record.setQaList(qaList);
	        record.setThrowId(userId);
	        record.setHydrangeaState(1);
	        UserEntity user = appUserService.findById(userId);
	        record.setGender(user.getGender());
	        throwHydrangeaRecordService.save(record);
	        log.info("infoMsg:--- 投笺(自选)结束");
	        return reponse.success();
	    } catch (Exception e) {
	        log.info("errorMsg:{--- 投笺(自选)失败:" + e.getMessage() + "---}");
	        return reponse.failure(e.getMessage());
	    }
	}
	
	/**
	 * 采笺(随机)
	 * 
	 * @param userId
	 * @param qaList
	 * @param isSendCircle
	 * @return
	 */
	@RequestMapping(value=Router.Hydrangea.THROW_HYDRANGEA_RANDOM,method=RequestMethod.POST)
	@ResponseBody
	public Response throw_hydrangea_random(@RequestParam("userId") int userId) {
	    log.info("infoMsg:--- 采笺(随机)开始");
	    Response reponse = this.getReponse();
	    String qaList = "";
	    try {
	        Query arecordQuery = new Query()
                    .addCriteria(Criteria.where("answerID").is(userId));
            List<ArecordVO> arecordList = arecordService.find(arecordQuery);
	        if(arecordList.size() < 20) {
	            return reponse.failure("答题数少于20,请补充后再来");
	        }
	        List<String> list = new ArrayList<>();
	        List<ArecordVO> hydrangeaList = CollectionRandomUtil.createRandomList(arecordList, 20);
	        for(ArecordVO vo : hydrangeaList) {
	            list.add(vo.getId());
	        }
	        qaList = list.toString().replace("[", "").replace("]", "").trim();
	        ThrowHydrangeaRecord record = new ThrowHydrangeaRecord();
	        record.setQaList(qaList);
            record.setThrowId(userId);
            record.setHydrangeaState(1);
            UserEntity user = appUserService.findById(userId);
            record.setGender(user.getGender());
	        throwHydrangeaRecordService.save(record);
	        log.info("infoMsg:--- 采笺(随机)结束");
	        return reponse.success();
	    } catch (Exception e) {
	        log.info("errorMsg:{--- 采笺(随机)失败:" + e.getMessage() + "---}");
	        return reponse.failure(e.getMessage());
	    }
	}
	
	
}
