<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

    <aop:aspectj-autoproxy />
    <!-- 注解探测器（组件扫描）@Controller -->
<!--    <context:component-scan base-package="com.java.*">
 -->    <context:component-scan base-package="com.xunxin.*">
        <context:exclude-filter type="annotation"
            expression="org.springframework.stereotype.Repository" />
        <context:exclude-filter type="annotation"
            expression="org.springframework.stereotype.Service" />
    </context:component-scan>
    
    <!-- 启动springMVC的注解功能，他会自动注册HandlerMapping,HandlerAdapter,ExceptionResolver的相关实例 -->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />
            </bean>
            <ref bean="mappingJacksonHttpMessageConverter" />
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- enable autowire -->
    
    <bean id="mappingJacksonHttpMessageConverter"
        class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" /> 

    <mvc:view-controller path="/" view-name="redirect:index"/><!--设置默认的主页 -->

    <!-- 处理JSON数据转换的 -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>

            <bean
                class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="charset" value="utf-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>


    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
    <bean id="contentNegotiationManager"
        class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
        <property name="favorPathExtension" value="true"/>
        <!-- 用于开启 /userinfo/123?format=json 的支持 -->
        <property name="favorParameter" value="true"/>
        <property name="parameterName" value="format"/>
        <!-- 是否忽略Accept Header -->
        <property name="ignoreAcceptHeader" value="false"/>
        
        <property name="mediaTypes">
            <value>
                json=application/json
                xml=application/xml
                html=text/html
            </value>
        </property>
    </bean>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP -->
    <!-- 默认的视图解析器在上边的解析错误时使用 (默认使用html)- -->

    <bean id="viewResolver"
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:prefix="/WEB-INF/" p:suffix=".jsp" />


    <!--由于web.xml中设置是由springMVC拦截所有请求，于是在读取静态资源文件的时候就会受到影响（说白了就是读不到） 经过下面的配置，该标签的作用就是所有页面中引用/css/**的资源，都会从/resources/styles/ 
        里面查找 -->
    <mvc:resources mapping="/logs/**" location="/logs/" />
    <mvc:resources mapping="/file/**" location="/file/" />
    <mvc:resources mapping="/jsp/**" location="/WEB-INF/jsp/" />
    <mvc:resources mapping="/commons/**" location="/WEB-INF/commons/" />
    <mvc:resources mapping="/include/**" location="/WEB-INF/include/" />
    <mvc:resources mapping="/hplus/**" location="/WEB-INF/hplus/" />
    <mvc:resources mapping="/tags/**" location="/WEB-INF/tags/" />
    <mvc:resources mapping="/plugins/**" location="/WEB-INF/plugins/" />
    <mvc:resources mapping="/assets/**" location="/WEB-INF/assets/" />
    <mvc:resources mapping="/FileUpload/**" location="/WEB-INF/FileUpload/" />

    <!-- 多个拦截器,顺序执行 -->
    <!-- 如果不配置或/*,将拦截所有的Controller -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/*" />
            <mvc:mapping path="/*/*" />
            <mvc:exclude-mapping path="/api/*" />
            <mvc:exclude-mapping path="/app-api/*" />
            <mvc:exclude-mapping path="/app-base/*" />
            <mvc:exclude-mapping path="/index" />
            <mvc:exclude-mapping path="/login" />
            <mvc:exclude-mapping path="/jsp/*" />
            <mvc:exclude-mapping path="/init/toinitPage" />
            <mvc:exclude-mapping path="/init/toInit" />
            <bean class="com.xunxin.interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 文件上传 -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- set the max upload size 100M -->
        <property name="maxUploadSize">
            <value>104857600</value>
        </property>
        <property name="maxInMemorySize">
            <value>1024000</value>
        </property>
    </bean>

    
    <context:annotation-config/>
</beans>

